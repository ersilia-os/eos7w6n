name: Post Model Upload actions

on:
  workflow_run:
    workflows: ["Upload model to DockerHub"]
    types:
      - completed

jobs:
  post-model-upload:
    if: ${{ github.repository != 'ersilia-os/eos-template' }}
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download arch.txt
        uses: actions/download-artifact@v4
        with:
          name: arch
          path: .
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check metadata file
        id: checkMetadata
        continue-on-error: true
        run: |
          if [[ ! -f metadata.yml ]]; then
            echo "metadata.yml file not found"
            exit 1
          fi

      - name: Update Metadata YAML file with DockerHub info
        id: updateMetadataYAML
        if: steps.checkMetadata.outcome == 'success'
        run: |
          python3 -c "
          import yaml
          with open('metadata.yml', 'r') as f:
            data = yaml.safe_load(f)
          print(data)
          with open('arch.txt', 'r') as f:
            arch = f.read().rstrip()
            arch = arch.split(',')
          data['DockerHub'] = 'https://hub.docker.com/r/ersiliaos/{0}'.format(data['Identifier'])
          data['Docker Architecture'] = arch
          with open('metadata.yml', 'w') as f:
            yaml.dump(data, f, default_flow_style=False, sort_keys=False)
          "
          rm arch.txt

      - name: Update Metadata JSON file with DockerHub info
        id: updateMetadataJSON
        if: steps.checkMetadata.outcome == 'failure'
        run: |
          python3 -c "
          import json
          with open('metadata.json', 'r') as f:
            data = json.load(f)
          print(data)
          with open('arch.txt', 'r') as f:
            arch = f.read().rstrip()
            arch = arch.split(',')
          data['DockerHub'] = 'https://hub.docker.com/r/ersiliaos/{0}'.format(data['Identifier'])
          data['Docker Architecture'] = arch
          with open('metadata.json', 'w') as f:
            json.dump(data, f, indent=4)
          "
          rm arch.txt
      
          
      - name: Commit and push changes done to the Metadata file
        uses: actions-js/push@156f2b10c3aa000c44dbe75ea7018f32ae999772 # pin@v1.4
        with:
          author_name: "ersilia-bot"
          author_email: "ersilia-bot@users.noreply.github.com"
          message: "updating metadata [skip ci]"
          repository: "ersilia-os/${{ github.event.repository.name }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          amend: true
          force: true

      # Setup conda
      - name: Setup conda
        id: setupConda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10.10"
  
      # Install ersilia
      - name: Install dependencies in Conda environment
        id: installDependenciesInConda
        run: |
          conda install gh -c conda-forge
          python -m pip install git+https://github.com/ersilia-os/ersilia.git

      - name: Update metadata to AirTable
        id: update-metadata-to-airtable
        env:
          USER_NAME: ${{ github.repository_owner }}
          BRANCH: "main"
          REPO_NAME: ${{ github.event.repository.name }}
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        run: |
          source activate
          pip install requests pyairtable
          echo "Updating metadata to AirTable looking at owner: $USER_NAME"
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/airtableops.py
          python3 airtableops.py airtable-update --user $USER_NAME --repo $REPO_NAME --branch $BRANCH --api-key $AIRTABLE_API_KEY
          rm airtableops.py
  
      - name: sync metadata to S3 JSON
        id: sync-metadata-to-s3
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          source activate
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/convert_airtable_to_json.py
          pip install boto3 requests pyairtable
          python convert_airtable_to_json.py $AIRTABLE_API_KEY $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
          rm convert_airtable_to_json.py

      - name: Update README file
        id: update-readme-file
        env:
          MODEL_ID: ${{ github.event.repository.name }}
        run: |
          echo "Updating README file with AirTable metadata for model: $MODEL_ID"
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/airtableops.py
          python3 airtableops.py readme-update --repo $MODEL_ID --path .
          rm airtableops.py
          less README.md

      - name: Commit and push changes done to the README file
        uses: actions-js/push@156f2b10c3aa000c44dbe75ea7018f32ae999772 # pin@v1.4
        with:
          author_name: "ersilia-bot"
          author_email: "ersilia-bot@users.noreply.github.com"
          message: "updating readme [skip ci]"
          repository: "ersilia-os/${{ github.event.repository.name }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          amend: true
          force: true

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ersiliaos/${{ github.event.repository.name }}
          short-description: "Ersilia Model Hub Identifier: ${{ github.event.repository.name }}"

      # Create an issue within the repository to track that this model is ready for testing

      - name: Shuffle assignees
        id: shuffle
        run: |
          export assignees=$(echo "${{ vars.assignees }}" | awk 'BEGIN {FS=","}; {srand();split($0,a,FS); print a[int(rand()*NF+1)]}')
          echo "$assignees" >> $GITHUB_STEP_SUMMARY
          echo "shuffled_assignee=$assignees" >> $GITHUB_OUTPUT
          echo "shuffled_assignee=$assignees" >> $GITHUB_ENV

      - name: Check for existing issue
        id: check_existing_test_issue
        run: |
          gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}
          issue_number=$(gh issue list --limit 100 --search "${{ vars.test_issue_title }}" --json number --jq '.[0].number')
          echo "::set-output name=issue_number::$issue_number"
  
      - name: Create a Test issue
        uses: actions-ecosystem/action-create-issue@b63bc2bbacb6a838dfe4a9f70da6665ae0962a49
        id: create_test_issue 
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          title: ${{ vars.TEST_ISSUE_TITLE }}
          assignees: |
            ${{ steps.shuffle.outputs.shuffled_assignee }}
          body: |
            This model is a new incorporation to the Ersilia Model Hub or it has been modified. If you are assigned to this issue, please try it out and ensure everything works!
            To test a model, first clone it in your local system (ideally, from dockerhub) using the CLI commands:
            ```
            ersilia -v fetch eosxxxx --from_dockerhub
            ersilia serve eosxxxx
            ersilia test
            ```
            The test command will automatically check that the model can handle null outputs and whether it produces consistent results. Please copy here the result of the test command. If it passes, simply close the issue as completed. If it fails, please detail at which step and whether you have taken any steps to solve it. Please tag the original model contributor and one of Ersilia's maintainers for support.
          labels: |
            test
        if: steps.check_existing_test_issue.outputs.issue_number == ''
